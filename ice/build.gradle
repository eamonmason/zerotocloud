// This script can create both an ICE reader AMI and an ICE processor AMI.  
// Pass in -Ptype=reader or -Ptype=processor. If no type property is supplied then it defaults
// to processor
// You must supply properties for the source S3 'billingbucket',
// and an S3 bucket for ICE to use 'icebucket'

import zerotocloud.*
import org.apache.tools.ant.filters.*
import groovy.json.JsonSlurper

def s3BillingBucket = ""
def s3ICEBucket = ""
def buildType = "processor"

if (hasProperty("type") && type == "reader") {
  buildType = "reader"
}

if (hasProperty("billingbucket") && hasProperty("icebucket")) {  
  s3BillingBucket = billingbucket
  s3ICEBucket = icebucket
}

def readerDir = new File("/opt/ice/ice-reader")
def workingDir = new File("/opt/ice/ice-working-directory")

task AWSConfig {
  def awsConfig = new File(System.properties['user.home'], "/.aws/config")
  file(awsConfig).withReader { reader -> 
    def userProps = new Properties() 
    userProps.load(reader) 
    logger.info("AWS properties: " + userProps)
    ext.awsSecretAccessKey = userProps.get("aws_secret_access_key")
    ext.awsAccessKeyId = userProps.get("aws_access_key_id")
    ext.awsRegion = userProps.get("region")    
  } 
  logger.info("AWS Secret: " + ext.awsSecretAccessKey + " Access Key: " + ext.awsAccessKeyId + " Region: " + ext.awsRegion)
}


task cloneRepo(type: CloneRepo) {
  dependsOn 'AWSConfig'

    logger.info('Cloning ice from github...')
    repository = 'https://github.com/Netflix/ice.git'
}

task accNum {
  dependsOn 'cloneRepo'
  
  def json = new JsonSlurper()    
  def result = json.parseText("http://169.254.169.254/latest/dynamic/instance-identity/document/".toURL().text)
  ext.id = result.accountId

}

// Create startup script

task filterScript (type: Copy) {
  dependsOn 'accNum'

    from 'scripts'
    into new File(buildDir, 'scripts')
    include '**/*'
    filter(ReplaceTokens, tokens: [awsAccessKeyId: AWSConfig.awsAccessKeyId, awsSecretAccessKey : AWSConfig.awsSecretAccessKey])
 
}

// Creates ice.writer properties

task copyPropertiesFile (type: Copy) {
  dependsOn 'filterScript'


    logger.info('Creating ice.properties...')

    from new File(cloneRepo.gitDir, "src/java/sample.properties") 
    into new File(cloneRepo.gitDir, 'src/java')
    if (buildType == "processor") {
      filter{        
          line -> line.contains('ice.processor=') ? 'ice.processor=true' : line     
      }
      filter {
          line -> line.contains('ice.reader=') ? 'ice.reader=false' : line     
      }
    }
    else {
      filter {  
          line -> line.contains('ice.processor=') ? 'ice.processor=false' : line     
      }
      filter {
          line -> line.contains('ice.reader=') ? 'ice.reader=true' : line     
      }
    }
    filter {
      line -> line.contains('ice.billing_s3bucketname=') ? 'ice.billing_s3bucketname=' + s3BillingBucket : line         
    }
    filter {
      line -> line.contains('ice.work_s3bucketname=') ? 'ice.work_s3bucketname=' + s3ICEBucket : line      
    }
    filter {
      line -> line.contains('ice.processor.localDir=') ? 'ice.processor.localDir=' + workingDir : line     
    }
    filter {
      line -> line.contains('ice.reader.localDir=') ? 'ice.reader.localDir=' + readerDir : line    
    }
    filter {
      line -> line.contains('ice.account.account1=') ? 'ice.account.account1=' + accNum.id : line    
    }
    
    rename { String fileName ->
      fileName.replace("sample.properties", "ice.properties")
    }
  
}

ospackage {

    packageName = 'ice_' + buildType

    from(copyPropertiesFile) {
        into('/opt/ice')
        user = 'ubuntu'
        permissionGroup = 'ubuntu'
    }


    from(cloneRepo) {
        into('/opt/ice')
        user = 'ubuntu'
        permissionGroup = 'ubuntu'
    }

    from(new File(buildDir,'scripts')) {
        into('/opt/ice/scripts')
        user = 'ubuntu'
        permissionGroup = 'ubuntu'
    }

    requires('default-jdk')
    requires('tomcat7')

    postInstall('chown -R ubuntu:ubuntu /opt/ice')
    postInstall('sudo -u ubuntu /opt/ice/scripts/postinstall.sh')
    postInstall('mkdir -p /var/log/ice; chown ubuntu:ubuntu /var/log/ice')

    // Disable tomcat start up (to stop port conflict with grails startup)
    postInstall('rm /etc/init.d/tomcat7')

    // Make ice startup automatically
    postInstall('cp /opt/ice/scripts/icedaemon /etc/init/ice.conf')

}
